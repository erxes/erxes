type CompanyProductConfig {
  companyId: ID!
  specificPrice: Float
}

type InsuranceProduct @key(fields: "_id") @cacheControl(maxAge: 3) {
  _id: ID!
  name: String
  code: String
  price: Float
  description: String
  riskIds: [ID]
  risks: [Risk]
  createdAt: Date
  updatedAt: Date
  lastModifiedBy: User
  companyProductConfigs: [CompanyProductConfig]
}

type InsuranceProductOfVendor @key(fields: "_id") @cacheControl(maxAge: 3) {
  _id: ID!
  name: String
  code: String
  price: Float
  description: String
  riskIds: [ID]
  risks: [Risk]
  createdAt: Date
  updatedAt: Date
}

type InsuranceProductPage {
  products: [InsuranceProduct]
  count: Int
}

input CompanyProductConfigInput {
  companyId: ID!
  specificPrice: Float
}

type Query {
  insuranceProducts(searchValue: String, page: Int, perPage: Int): [InsuranceProduct]
  insuranceProductsPaginated(
    page: Int
    perPage: Int
    sortField: String
    sortDirection: SortDirection
    searchValue: String
  ): InsuranceProductPage
  insuranceProduct(_id: ID!): InsuranceProduct
  insuranceProductsOfVendor: [InsuranceProductOfVendor]
}

type Mutation {
  insuranceProductsAdd(
    name: String!
    code: String!
    description: String!
    price: Float!
    riskIds: [ID]
    companyProductConfigs: [CompanyProductConfigInput]
  ): InsuranceProduct
  insuranceProductsEdit(
    _id: ID!
    name: String
    code: String
    description: String
    price: Float
    riskIds: [ID]
    companyProductConfigs: [CompanyProductConfigInput]
  ): InsuranceProduct
  insuranceProductsRemove(_id: ID!): String
}
