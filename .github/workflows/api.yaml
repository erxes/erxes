name: Api CI

on:
  push:
    branches:
      - "**"
    paths:
      - "api/**"
      - "plugins/**/api/**"
      - ".github/workflows/api.yaml"
  pull_request:
    branches:
      - priuscenter
      - crons
      - workers
    paths:
      - "api/**"
      - "plugins/**/api/**"
      - ".github/workflows/api.yaml"

jobs:
  api:
    runs-on: ubuntu-18.04

    services:
      mongodb:
        image: mongo:4.0
        ports:
          - 27017:27017

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 12.20.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.20.x

      # https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-api-${{ hashFiles('yarn.lock', 'api/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-api-
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install
          yarn prepare-plugins-api
          cd api
          yarn install --frozen-lockfile

      - name: Lint
        run: |
          yarn lint api

      - name: Tsc
        run: |
          cd api
          yarn tsc -p tsconfig.prod.json

      - name: Build
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'push'
        run: |
          cd api
          rm -rf node_modules
          rm -rf dist
          yarn install --frozen-lockfile --production
          cd ..
          yarn prepare-plugins-api
          cd api
          yarn build

      - name: Build docker image
        if: github.event_name == 'push' && ( github.ref == 'refs/heads/priuscenter'|| github.ref == 'refs/heads/crons' || github.ref == 'refs/heads/workers' )
        env:
          BASE_IMAGE: erxes/erxes-api:base-12.19.1-slim
          DOCKER_BUILDKIT: 1
        run: |
          cd api
          echo ${{ secrets.REGISTRY_TOKEN }} | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin
          docker build --build-arg BASE_IMAGE=$BASE_IMAGE -t ${{ secrets.REGISTRY_URL }}/erxes-enterprise/erxes-api:${GITHUB_REF#refs/heads/} -f api.Dockerfile .
          docker push ${{ secrets.REGISTRY_URL }}/erxes-enterprise/erxes-api:${GITHUB_REF#refs/heads/}
